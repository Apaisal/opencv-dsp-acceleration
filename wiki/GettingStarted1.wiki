#summary Procedure to setup tools like DSPLink and Codec-Engine.
This wiki-page describes the required setup and tools to get going.
= Introduction =

Installing DSP/BIOS Link, Code Generation Tools, DSP BIOS, XDC Tools and Codec Engine.

The following tools were used for this project. The download link is also provided.

DSP/BIOS Link 1.64         [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/DSPLink/1_64/index_FDS.html [DSPLink]]

cgt_c6000_7.0.1            [https://www-a.ti.com/downloads/sds_support/CodeGenerationTools.htm#C6000 [Code Generation Tools]]

DSP/BIOS 5.41.00.06        [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/bios/dspbios/index.html [DSP/BIOS]]

XDC tools 3.16.00.18       [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/rtsc/3_16_00_18/index_FDS.html [XDC Tools]]

Codec Engine 2.25.02.11    [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/ce/2_25_02_11/index_FDS.html [Codec Engine with cetools]]

All the tools were saved on my Desktop  at /home/jars/Desktop. Which will be called {{{<Base_Download_Dir>}}}.
= Details =
==Install DSP/BIOS Link==

First untar the DSP/BIOS Link (DSP Link) inside a folder in your working directory. In my case it is /home/jars/Dsp_gsoc, which I will name '{{{<work>}}}' for quick reference.
 {{{
 # mkdir -p <work>/dsplink
 # cd <work>/dsplink
 # tar -xvzf <Base_Download_Dir>/dsplink_linux_1_64.tar.gz
 }}}
Before we can proceed further, we need to install Code Generation Tools, DSP/BIOS and XDC Tools. These comes in binary form and can be directly installed after making them executable.
 {{{
 # chmod +x <Base_Download_Dir>/ti_cgt_c6000_7.0.1_setup_linux_x86.bin
 # chmod +x <Base_Download_Dir>/bios_setuplinux_5_41_00_06.bin
 # chmod +x <Base_Download_Dir>/xdctools_setuplinux_3_16_00_18.bin
 }}}
After making them executable, we can start installing by executing the binaries.

===Installing Code Generation Tools===

 {{{
 # <Base_Download_Dir>/ti_cgt_c6000_7.0.1_setup_linux_x86.bin
 }}}
It is simple afterward as graphical installation wizard starts and you just have to confirm with certain settings and select your installation directory. In my case the installation directory was selected to be 'work/code_gen'.

===Installing DSP/BIOS===

 {{{
 # <Base_Download_Dir>/bios_setuplinux_5_41_00_06.bin
 }}}
It is simple afterward as graphical installation wizard starts and you just have to confirm with certain settings and select your installation directory. In my case the installation directory was selected to be 'work/bios'.

===Installing XDC Tools===

 {{{
 # <Base_Download_Dir>/xdctools_setuplinux_3_16_00_18.bin
 }}}
It is simple afterward as graphical installation wizard starts and you just have to confirm with certain settings and select your installation directory. In my case the installation directory was selected to be 'work/xdctools'.

=== Continue with DSPLink===
After installing all the dependencies, we can now proceed further to install DSP Link.
 
To start with, export the base dsplink path. 
 {{{
 # export DSPLINK /home/jars/Dsp_gsoc/dsplink/dsplink_linux_1_64/dsplink
 }}}

First, we-need to run DSPLink configuration

 {{{
 # cd <DSPLink_Base_Dir>/dsplink/config/bin
 #  perl dsplinkcfg.pl --platform=OMAP3530 --nodsp=1  --dspcfg_0=OMAP3530SHMEM     --dspos_0=DSPBIOS5XX --gppos=OMAPLSP --comps=ponslrmc --trace=1 --legacy=1 --DspTskMode=1
 Note: We can also give seperate destination for build sources by providing options '--gpp_temp=<path_of_dir_our_choice> --dsp0_temp=<path_of_dir_of_our_choice>'. But this  can give trouble later when building codec-engine-server examples. The error is shown in the build procedure for codec-engine exaples.

 Successful configuration will give message like this at the end.

 =========================================================

Configuration done successfully!!
Generating CURRENTCFG.MK file...
Generating multimake script...
Generating CFG_system.c File...
Generating GPP RTSC xdc file...
Generating DSP RTSC xdc file...
=========================================================
Please edit the following files for toolchains, kernel sources, etc changes.
GPP side distribution file: $DSPLINK/make/Linux/omap3530_2.6.mk
GPP side distribution file: $DSPLINK/gpp/src/Rules.mk
DSP side distribution file: $DSPLINK/make/DspBios/c64xxp_5.xx_linux.mk
==========================================================
Users consuming DSPLINK as XDC package, Need to do the following.
cd into the $(DSPLINK)/dsp directory and run: 
 $(XDC_INSTALL_DIR)/xdc clean 
 $(XDC_INSTALL_DIR)/xdc .interfaces 
cd into the $(DSPLINK)/gpp directory and run: 
 $(XDC_INSTALL_DIR)/xdc clean 
 $(XDC_INSTALL_DIR)/xdc .interfaces 
==========================================================

 }}} 

As said in the message if you are using DSPLink for XDC package. Execute those four instruction.

Next, we need to edit three make files as shown in the message to provide path of various tools. I will mention only necessary changes to be done on the make files. Rest can be left untouched. Please find the respective line in the make file mentioned below.

1) Find omap3530_2.6.mk in the directory $DSPLINK/make/Linux/ by typing # cd $DSPLINK/make/Linux/. Edit this file using VI or Gedit.
{{{
 ..........
 ..........
 BASE_BUILDOS    := <Base_OE_Dir>/build/tmp-angstrom_2008_1/sysroots/beagleboard-angstrom-linux-gnueabi/kernel
 ...........
 ...........
 BASE_TOOLCHAIN  := <Base_OE_Dir>/build/tmp-angstrom_2008_1/cross/armv7a
 ...........
 ...........
 OSINC_PLATFORM  := $(BASE_TOOLCHAIN)/lib/gcc/arm-angstrom-linux-gnueabi/4.3.3/include
 ...........
 ...........
 COMPILER        := $(BASE_CGTOOLS)/arm-angstrom-linux-gnueabi-gcc
 ..........
 ..........
 LD              := $(BASE_CGTOOLS)/arm-angstrom-linux-gnueabi-ld
 ..........
 ..........
 CROSS_COMPILE   := arm-angstrom-linux-gnueabi-
 ..........
 ..........
 ARCHIVER        := $(BASE_CGTOOLS)/arm-angstrom-linux-gnueabi-ar
 .......... 
 ..........
 LINKER      := $(BASE_CGTOOLS)/arm-angstrom-linux-gnueabi-gcc
 .........
 .........
 
}}}

Don't forget to save the changes at the end.

2) Find Rules.mk in the directory $DSPLINK/gpp/src/ by typing # cd $DSPLINK/gpp/src/. Edit this file using VI or Gedit.

 {{{
 .........
 .........
 KERNEL_DIR    := <Base_OE_Dir>/build/tmp-angstrom_2008_1/sysroots/beagleboard-angstrom-linux-gnueabi/kernel
 .........
 .........
 TOOL_PATH     := <Base_OE_Dir>/build/tmp-angstrom_2008_1/cross/armv7a/bin
 .........
 .........
 CG_PREFIX = arm-angstrom-linux-gnueabi-
 .........
 .........
 MAKE_OPTS = ARCH=arm CROSS_COMPILE=$(TOOL_PATH)/arm-angstrom-linux-gnueabi-
 .........
 .........

 }}}
Again, don't forget to save the changes.

3) Find c64xxp_5.xx_linux.mk in the directory $DSPLINK/make/DspBios/ by typing # cd $DSPLINK/make/DspBios/. Edit this file using VI or Gedit.
 {{{
 ...........
 ...........
 BASE_INSTALL    := <work>
 ...........
 ...........
 BASE_SABIOS     := $(BASE_INSTALL)/bios/bios_5_41_00_06
 ...........
 ...........
 XDCTOOLS_DIR    := $(BASE_INSTALL)/xdctools_3_16_00_18
 ............
 ............
 BASE_CGTOOLS    := $(BASE_INSTALL)/code_gen
 ............
 ............
  
 }}}

That's all. You are done with editing and its time to make it work. But, before that make sure that you have saved all the changes.

Now, goto $DSPLINK/gpp/src/api/ and execute following commands.

 {{{
 # cd $DSPLINK/gpp/src/api/
 # make -s clean
 # make -s debug
 # make -s release
 Or you can do 'make -s' to build both debug and release version.
 }}}

Next, goto $DSPLINK/gpp/src/ and execute following commands which builds OMAP3530 loadable module. The module 'dsplinkk.ko' will be save at '$DSPLINK/gpp/export/BIN/Linux/OMAP3530/<RELEASE & DEBUG>/
 {{{
 # cd $DSPLINK/gpp/src/
 # make -s clean
 # make -s debug
 # make -s release
 Or you can do 'make -s' to build both debug and release version.
 }}}

Next, goto $DSPLINK/gpp/src/samples/ and execute following commands to build GPP side sample examples. The all GPP side executables will be save at '$DSPLINK/gpp/export/BIN/Linux/OMAP3530/<RELEASE & DEBUG>/

 {{{
 # cd $DSPLINK/gpp/src/samples/
 # make -s clean
 # make -s debug
 # make -s release
 Or you can do 'make -s' to build both debug and release version.
 
 }}}

Next, goto $DSPLINK/dsp/src/ and execute following commands to build dsp libraries.

 {{{
 # cd $DSPLINK/dsp/src/
 # make -s clean
 # make -s debug
 # make -s release
 Or you can do 'make -s' to build both debug and release version.
 
 }}}

Next, goto $DSPLINK/dsp/src/samples/ and execute following commands to build dsp side sample examples. Examples will be save at '$DSPLINK/dsp/export/BIN/DspBios/OMAP3530/OMAP3530_0/<RELEASE & DEBUG>/ with .out extension.

 {{{
 # cd $DSPLINK/dsp/src/
 # make -s clean
 # make -s debug
 # make -s release
 Or you can do 'make -s' to build both debug and release version.
 
 }}}

===Missing something! LPM??===

If everything goes well, you are good to test some sample examples. But before that it is suggested to build LPM modules if you are using DSPLink outside the codec-engine. You need LPM module to power-cycle the DSP while switching to different application. It is not required to run the LPM for the first time. Before running different application you need to power off & then on the DSP using lpmOFF.x470uC. and lpmONx470uC. It can be downloaded at http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/lpm/1_24_02_09/. Save the file 'local_power_manager_linux_1_24_02_09.tar.gz' and untar it to the destination directory.

 {{{
 # cd <Base_LPM_Dir>
 # tar -xvzf /home/jars/Desktop/local_power_manager_linux_1_24_02_09.tar.gz
 }}}

You need to edit Makefile inside the folder after you do '# cd' as mentioned below before start building the LPM module. I will mention only necessary changes. Rest of the file can be left untouched.

 {{{
 # cd  <Base_Dir_LPM>/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/modules/omap3530/lpm
 #gedit Makefile     

Note: You can also use vi editer to edit Makefile by typing '#vi Makefile'
 }}}

Following changes are to be done inside Makefile.
 {{{
 ...................
 ...................
 LINUXKERNEL_INSTALL_DIR = <Base_OE_Dir>/build/tmp-angstrom_2008_1/sysroots/beagleboard-angstrom-linux-gnueabi/kernel
 MVTOOL_PREFIX = <Base_OE_Dir>/build/tmp-angstrom_2008_1/cross/armv7a/bin/arm-angstrom-linux-gnueabi-
 DSPLINK_REPO = <work>/dsplink/dsplink_linux_1_64
 ...................
 ...................
 }}}

Finally the LPM module is ready to build. To build, you need to be in the same directory where the Makefile is.

 {{{
 # make 
 }}}

LPM module is now built and you can see it in the same path from where you invoked make command. The binary file needed for LpmOff and LpmOn are provided at 
 {{{
 <work>/lpm/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/utils/bin/ti_platforms_evm3530/linux/<debug & release>
 }}}

===Copying Modules and sample application to beagleboard===
Now the time has come to test your work.
Make a folder called 'dsp' inside '/lib/modules/2.6.32/kernel/drivers/' of your target beagleboard by typing following in your target board command prompt.
 {{{
 $ mkdir /lib/modules/2.6.32/kernel/drivers/dsp
 }}}

First copy your dsplinkk.ko and lpm_omap3530.ko modules to your target board. If your board is NFS mount, it is just matter of copying these files from respective path to the 
{{{<Board_Target_Mount>/lib/modules/2.6.32/kernel/drivers/dsp/}}}. If not, you can copy these in the particular folder mentioned above in your mmc card.
 {{{
 # cp <work>/lpm/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/modules/omap3530/lpm/lpm_omap3530.ko <Board_Target_Dir>/lib/modules/2.6.32/kernel/drivers/dsp/
 # cp $DSPLINK/gpp/export/BIN/Linux/OMAP3530/<DEBUG or RELEASE>/dsplinkk.ko <Board_Target_Mount>/lib/modules/2.6.32/kernel/drivers/dsp/
 }}}

 Copy LPM binaries that is already provided for us at {{{ <work>/lpm/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/utils/bin/ti_platforms_evm3530/linux/}}} to {{{<Board_Target_Mount>/usr/bin}}}.

 {{{
 # cp <work>/lpm/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/utils/bin/ti_platforms_evm3530/linux/lpmOFF.x470uC <Board_Target_Mount>/usr/bin
 # cp <work>/lpm/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/utils/bin/ti_platforms_evm3530/linux/lpmON.x470uC <Board_Target_Mount>/usr/bin
 }}}

To make things easy, script to load and unload these recently built modules is already provided to us at {{{ <work>/lpm/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/modules/omap3530/}}}. First create a folder in your target beagleboard filesystem where you want to preserve all your work related to DSPLink. Let's name this folder as *{{{<Target_work>}}}*. Now there is a little editing you need to do in file 'loadmodule.sh' before you copy them. Specify the correct path of your modules by editing the lines in the files as hown below.

 {{{
 ...........
 ...........
 insmod /lib/modules/2.6.32/kernel/drivers/dsp/dsplinkk.ko
 ...........
 ...........
 insmod /lib/modules/2.6.32/kernel/drivers/dsp/lpm_omap3530.ko

 }}}


Now copy these files inside this folder.

 {{{
 # cp <work>/lpm/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/modules/omap3530/loadmodules.sh <Board_Target_Mount>/<Target_work>/
 cp <work>/lpm/local_power_manager_linux_1_24_02_09/packages/ti/bios/power/modules/omap3530/unloadmodules.sh <Board_Target_Mount>/<Target_work>/
 }}}

Now copy the sample examples to the board files system. You can copy as many samples as you want to test but I will mention here about only one.



Error while building codec-engine server if you have specified some other destination directory directory while building dsplink.
js: "/home/jars/Dsp_gsoc/xdctools_3_16_00_18/packages/xdc/cfg/Main.xs", line 40: XDC runtime error: can't find the library 'export/BIN/DspBios/OMAP3530/OMAP3530_0/RELEASE/dsplink.lib' specified by package dsplink.dsp. It wasn't found along the path '/home/jars/Dsp_gsoc/codec_engine_n_tools/codec_engine_2_25_02_11/examples/ti/sdo/ce/examples/servers/all_codecs/../../../../../..;/home/jars/Dsp_gsoc/codec_engine_n_tools/codec_engine_2_25_02_11/cetools/packages;/home/jars/Dsp_gsoc/codec_engine_n_tools/codec_engine_2_25_02_11/packages;/home/jars/Dsp_gsoc/bios/bios_5_41_00_06/packages;/home/jars/Dsp_gsoc/dsplink/dsplink_linux_1_64;/home/jars/Dsp_gsoc/xdctools_3_16_00_18/packages;../../../../../..;'.
gmake[1]: *** [package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg_c.c] Error 1
gmake[1]: *** Deleting file `package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg_c.c'
gmake[1]: *** [package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg_c.c] Deleting file `package/cfg/bin/ti_platforms_evm3530/all_x64P.xdl'
gmake[1]: *** [package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg_c.c] Deleting file `package/cfg/bin/ti_platforms_evm3530/all_x64P.h'
gmake[1]: *** [package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg_c.c] Deleting file `package/cfg/bin/ti_platforms_evm3530/all_x64P.c'
gmake[1]: *** [package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg_c.c] Deleting file `package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg.cmd'
gmake[1]: *** [package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg_c.c] Deleting file `package/cfg/bin/ti_platforms_evm3530/all_x64Pcfg.s62'
gmake: *** [/home/jars/Dsp_gsoc/codec_engine_n_tools/codec_engine_2_25_02_11/examples/ti/sdo/ce/examples/servers/all_codecs,.executables] Error 2
make[1]: *** [all] Error 2
make[1]: Leaving directory `/home/jars/Dsp_gsoc/codec_engine_n_tools/codec_engine_2_25_02_11/examples/ti/sdo/ce/examples/servers/all_codecs'
make: *** [all] Error 2