#Building and testing the Sobel


= Introduction =

This page explains the building and testing procedure of the uploaded examples.


= Details =

It is assumed that you have a working codec-engine environment.
The easiest way to have it through OpenEmbedded. If you have a OpenEmbedded development environment, you just need to do "#bitbake ti-codec-engine". But before that don't forget to read the Readme file at {{{<OE_BASE_DIR>}}}/sources/openembedded/recipes/ti. You may have to download some of the tools manually.

After you have your codec-engine environment, if you want to re-build the codec-engine examples or DSPLink examples you can follow [http://code.google.com/p/opencv-dsp-acceleration/wiki/GettingStarted1 this] for modifying your necessary Makefiles. There is some version mis-match in this page and it is recommended to follow only for Makefile changes and executing re-built examples.

==Note==
Befor you start building this example, you need the following.

1) OpenCV built using bitbake.

2) DSPLib and IMGLib.

  DSPLib can be found at [http://focus.ti.com/docs/toolsw/folders/print/sprc265.html]

  IMGLib can be found at [http://focus.ti.com/docs/toolsw/folders/print/sprc264.html]

  You can download and save them at the directory containing various tools like 'code generation tools, 'codec-engine', 'xdc-tools', etc.

  For example, I have saved these libraries at {{{/media/disk/OE/work/ti}}}.

*Checkout the project using following command* 
  svn checkout http://opencv-dsp-acceleration.googlecode.com/svn/trunk/ opencv-dsp-acceleration-read-only

The source-file for the example is on trunk and its subdirectories.


==Goto {{{BASE_DIR}}}==

#cd {{{Dir_You_Checked_Out}}}/dsp_opencv


==Editing Necessary Files==

Use "gedit" or "vi" to edit following files.

===Rules.make===
Change the path of various tools to point to the correct base directory. If you have one of your Rules.make file for your working DVSDK, you may probably borrow it. Don't forget to update the path for DSPLib and IMGLib.

===Makefile===
In the makefile change CODEGEN_INSTALL_DIR and CROSS_COMPILE to point to the correct base directory.

===Makefile.app===
Change path to OpenCV header files in Makefile.app

For example, you may find *{{{OPENCV_PATH = /media/disk/openembedded/build/tmp-angstrom_2008_1/sysroots/armv7a-angstrom-linux-gnueabi/usr/include}}}* if you look at the Makefile.app. Change the path to point to the base directory containing opencv and opencv2 sub-directories that was build using bitbake.


===link.cmd===
Go to sub-directory containing server package and edit file link.cmd.

  {{{#cd <BASE_DIR>/beagle/server/opencv_unitserver_evm3530}}}

  {{{#gedit link.cmd}}}

And add following lines to this file.

  -l {{{<PATH_WHERE_YOU_SAVED_DSPLIB>}}}/dsplib_v210/dsplib64plus.lib

  -l {{{<PATH_WHERE_YOU_SAVED_IMGLIB>}}}/imglib_v201/lib/target/imglib2.l64P


==Building==

===Server Executable and ARM Executable===
 {{{#cd <PATH_TO_FOLDER_CONTAINING_MAKEFILE>}}} // Let us assume that this will be your BASE_DIR

 {{{#make codec}}}

 {{{#make server}}}

 {{{#make library}}}

 {{{#make app}}}

 {{{#make install}}}


The server executable will be located at
  {{{<BASE_DIR>}}}/beagle/server/opencv_unitserver_evm3530 
named *"opencv_unitserver_evm3530.x64P"*.

The ARM executable will be located at
  {{{<BASE_DIR}}}/beagle/apps/opencv/linux 
named *"remote_ti_platforms_evm3530_opencv.xv5T"*. 

The shared library will be located at 
  {{{<BASE_DIR}}}/beagle/library/opencv/lib
named *"libopencvdsp.so"*


==Set Memory for Linux==

Before booting up the beagleboard, set aside memory for linux not greater than 128M from uboot prompt.
  OMAP3 beagleboard.org # setenv bootargs console=${console} vram=${vram} mapfb.mode=dvi:${dvimode} omapfb.debug=y omapdss.def_disp=${defaultdisplay} root=${mmcroot} rootfstype=${mmcrootfstype} mem=128M 

==Copy Files and Executables to Beagleboard==

Copy  *opencv_unitserver_evm3530.x64P*, *remote_ti_platforms_evm3530_opencv.xv5T* and the folder *{{{<BASE_DIR}}}/beagle/library/opencv/lib* to your beagleboard at the same base directory. If you have already executed *#make install*, the library and other executables will be copied for you if your host is nfs mounted over Beagleboard. However, to use this command the *EXEC_DIR* variable should be properly set in Rules.make.

Load all the kernel modules necessary, like dsplinkk.ko, lpm_omap3530.ko, cmemk.ko.

You can also load these modules using the script in the scripts directory. 
If you are using your own script, please check the buffer size. Memory region allocated to CMEM should not overlap with that allocated to the operating system.

==Execute==
Simply type the following command to execute. A window will pop-up which will show the processed webcam-view.

*#./remote_ti_platforms_evm3530_opencv.xv5T*

====Note====
1) To test the example you need to have a webcam. I have tested the app using Logitech webcam Pro 9000. It will demonstrate the sobel algorithm.

2) If you want to test for single image "road_grey.pgm" and 1-D dft, please checkout svn revision 75. So far, the example in this revision can perform 1-D DFT and sobel_3x3. 

  a)The result of the 1-D DFT will be seen on console output screen and is not stored anywhere. The result will not match exactly with that from Matlab as scaling is to be done. For DFT size of 128, as in the example, the result should be multiplied by 8.

  b) Copy "road_grey.pgm" file located at {{{<BASE_DIR>}}}/beagle/apps/opencv/test_data before executing. The result for the sobel_3x3 will be stored as an image "result.pgm", in the same path where the code is executed. It can be viewed easily.

  c)By default, the example is set for sobel_3x3 operation. To check for 1-D DFT you need to change "OPENCV_Operation operation = OPENCV_OPERATION_DFT" near the top of the file "app.c" found at {{{<BASE_DIR>}}}/beagle/apps/opencv/linux.