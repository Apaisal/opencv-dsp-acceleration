#Building and testing the Sobel


= Introduction =

This page explains the building and testing procedure of the uploaded examples.


= Details =

It is assumed that you have a working codec-engine environment.
The easiest way to have it through OpenEmbedded. If you have a OpenEmbedded development environment, you just need to do "#bitbake ti-codec-engine". But before that don't forget to read the Readme file at {{{<OE_BASE_DIR>}}}/sources/openembedded/recipes/ti. You may have to download some of the tools manually.

After you have your codec-engine environment, if you want to re-build the codec-engine examples or DSPLink examples you can follow [http://code.google.com/p/opencv-dsp-acceleration/wiki/GettingStarted1 this] for modifying your necessary Makefiles. There is some version mis-match in this page and it is recommended to follow only for Makefile changes and executing re-built examples.

==Note==
Befor you start building this example, you need the following.

1) OpenCV built using bitbake.
   You need to modify some of the source files using the patch provide at  {{{Dir_You_Checked_Out}}}/dsp_opencv/patch. Therefore it is suggested that you either comment the line *INHERIT += "rm_work"* to *#INHERIT += "rm_work"* on _local.conf_ at {{{<OE_BASE_DIR>}}}/build/conf before you do *#bitbake opencv*, or use following commands to build OpenCV.
  #bitbake -f -c compile opencv

Install OpenCV package on Beagleboard, if it is not installed.

2) DSPLib and IMGLib.

  DSPLib can be found at [http://focus.ti.com/docs/toolsw/folders/print/sprc265.html]

  IMGLib can be found at [http://focus.ti.com/docs/toolsw/folders/print/sprc264.html]

  You can download and save them at the directory containing various tools like 'code generation tools, 'codec-engine', 'xdc-tools', etc.

  For example, I have saved these libraries at {{{/media/disk/OE/work/ti}}}.

*Checkout the project using following command* 
  svn checkout http://opencv-dsp-acceleration.googlecode.com/svn/trunk/ opencv-dsp-acceleration-read-only

The source-file for the example is on trunk and its subdirectories. The folder you checked out the project will be called "DIR_YOU_CHECKED_OUT".

==Applying OpenCV patch and re-building==

There is a OpenCV patch provided at  {{{DIR_YOU_CHECKED_OUT}}}/dsp_opencv/patch. Go to  the base directory containing OpenCV in the development environment. Apply the patch. For example, 
  #cd {{{<OE_BASE_DIR>}}}/build/tmp-angstrom_2008_1/work/armv7a-angstrom-linux-gnueabi/opencv-2.1.0+svnr3241-r1/opencv
  #patch -p0 < {{{DIR_YOU_CHECKED_OUT}}}/dsp_opencv/patch/opencvdsp.diff 

If that didnot work try

  #patch -p1 < {{{Dir_You_Checked_Out}}}/dsp_opencv/patch/opencvdsp.diff 

Now, from the OpenCV base directory go to *modules/imgproc/CMakeFiles/opencv_imgproc.dir*

  #cd modules/imgproc/CMakeFiles/opencv_imgproc.dir

Edit file *flags.make* using "gedit" and add line "-I{{<DIR_YOU_CHECKED_OUT>}}}/dsp_opencv" at the end of "CXX_FLAGS =".

Similarly, edit file *link.txt* and add "-ldspopencv" in between. The part of line after adding this word will look some-what similar like "-L/media/disk/OE/build/tmp-angstrom_2008_1/sysroots/armv7a-angstrom-linux-gnueabi/usr/lib -Wl,-rpath-link *-lopencvdsp*,/media/disk/OE/build/tmp-angstrom_2008_1/sysroots/armv7a-angstrom-linux-gnueabi/usr/lib" 

Now,goto "modules/core/CMakeFiles/opencv_core.dir" from the OpenCV base directory and add the same as mentioned above to the files *flags.make* and *link.txt*.

From the base-directory of OpenCV, issue the following commands to build the new library.
  #make opencv_imgproc/fast
  #make opencv_core/fast

These commands will re-build 'opencv_core' and 'opencv_imgproc' libraries which will be saved at {{{<OPENCV_BASE_DIR>}}}/lib. Now, copy these library files, libopencv_core.so, libopencv_core.so.2.1, libopencv_core.so.2.1.1, libopencv_imgproc.so, libopencv_imgproc.so.2.1 and libopencv_imgproc.so.2.1.1 to your Beagleboard at folder "/usr/lib".


==Goto {{{BASE_DIR}}}==

  #cd {{{Dir_You_Checked_Out}}}/dsp_opencv


==Editing Necessary Files For this project==

Use "gedit" or "vi" to edit following files.

===Rules.make===
Change the path of various tools to point to the correct base directory. If you have one of your Rules.make file for your working DVSDK, you may probably borrow it. Don't forget to update the path for DSPLib and IMGLib.

===Makefile===
In the makefile change *CODEGEN_INSTALL_DIR* and *CROSS_COMPILE* to point to the correct base directory of your DSP-side and ARM-side toolchain. Also, change *LD_DIR* to point to the /usr/bin of your OE build environment. For example, I have changed it to */media/disk/OE/build/tmp-angstrom_2008_1/sysroots/armv7a-angstrom-linux-gnueabi/usr/lib*.

===Makefile.app===
Change path to OpenCV header files in Makefile.app

For example, you may find *{{{OPENCV_PATH = /media/disk/openembedded/build/tmp-angstrom_2008_1/sysroots/armv7a-angstrom-linux-gnueabi/usr/include}}}* if you look at the Makefile.app. Change the path to point to the base directory containing opencv and opencv2 sub-directories that was build using bitbake.


===link.cmd===
Go to sub-directory containing server package and edit file link.cmd.

  {{{#cd <BASE_DIR>/beagle/server/opencv_unitserver_evm3530}}}

  {{{#gedit link.cmd}}}

And add following lines to this file.

  -l {{{<PATH_WHERE_YOU_SAVED_DSPLIB>}}}/dsplib_v210/dsplib64plus.lib

  -l {{{<PATH_WHERE_YOU_SAVED_IMGLIB>}}}/imglib_v201/lib/target/imglib2.l64P


==Building==

===Server Executable and ARM Executable===
 {{{#cd <PATH_TO_FOLDER_CONTAINING_MAKEFILE>}}} // Let us assume that this will be your BASE_DIR

 {{{#make codec}}}

 {{{#make server}}}

 {{{#make library}}}

 {{{#make app}}}

 {{{#make install}}}


The server executable will be located at
  {{{<BASE_DIR>}}}/beagle/server/opencv_unitserver_evm3530 
named *"opencv_unitserver_evm3530.x64P"*.

The ARM executable will be located at
  {{{<BASE_DIR}}}/beagle/apps/opencv/linux 
named *"remote_ti_platforms_evm3530_opencv.xv5T"*. 

The shared library will be located at 
  {{{<BASE_DIR}}}/beagle/library/opencv/lib
named *"libopencvdsp.so"*


==Set Memory for Linux==

Before booting up the beagleboard, set aside memory for linux not greater than 128M from uboot prompt.
  OMAP3 beagleboard.org # setenv bootargs console=${console} vram=${vram} mapfb.mode=dvi:${dvimode} omapfb.debug=y omapdss.def_disp=${defaultdisplay} root=${mmcroot} rootfstype=${mmcrootfstype} mem=128M 

==Copy Files and Executables to Beagleboard==

Copy  *opencv_unitserver_evm3530.x64P* and *remote_ti_platforms_evm3530_opencv.xv5T*  to your beagleboard at the same base directory. If you have already executed *#make install*, executables will be copied for you if your host is nfs mounted over Beagleboard. However, to use this command the *EXEC_DIR* variable should be properly set in Rules.make. Also, copy the ARM side library that you just build, libopencvdsp.so, to the Beagleboard at '/usr/lib'.

Load all the kernel modules necessary, like dsplinkk.ko, lpm_omap3530.ko, cmemk.ko.

You can also load these modules using the script in the scripts directory. 
If you are using your own script, please check the buffer size. Memory region allocated to CMEM should not overlap with that allocated to the operating system.

==Execute==
Simply type the following command to execute. This will show the usage of the command. You can follow the usage after that. To toggle between DSP and ARM you can either export *OPENCVDSP* as 1 or 0 to environment variable.

*#OPENCVDSP=1 ./remote_ti_platforms_evm3530_opencv.xv5T* // For using DSP and ARM
*#OPENCVDSP=0 ./remote_ti_platforms_evm3530_opencv.xv5T* // For using ARM only

====Note====
1) To test the example you may need to copy the test data files at {{{<BASE_DIR>}}}/beagle/apps/opencv/test_data or need to have a webcam. I have tested the app using Logitech webcam Pro 9000 to demonstrate sobel algorithm.
2) The example demonstrates 2-D 16x16 forward DFT. The output data is scaled and displayed on the screen.
3) The example demonstrated 3x3 sobel algorithm. Due to low visibility of signed-image in using cvShowImage(), the image is converted back to unsigned and then displayed.

To test different sobel filter and different DFT types supported, you need to modify the 'app.c' accordingly. 

 