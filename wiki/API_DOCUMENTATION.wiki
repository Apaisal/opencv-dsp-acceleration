#summary Description of all API introduced in this library

= Introduction =

This page describes the API introduced in this project.

This work is related to OpenCV 2.1. Thus, it is assumed that users are familair with OpenCV data types, structures for Matrices and Images and OpenCV API's.
For information on OpenCV data types and structures you can refer to [http://opencv.willowgarage.com/documentation/index.html]. 
Also, [http://oreilly.com/catalog/9780596516130 this] book on OpenCV can be helpful.

All introduced API names starts with *{{{DSP_}}}* followed by OpenCV API name. This is the general convention used and is expected same for further development work. Input arguments to API are same as that of OpenCV.

Three of the APIs, namely *DSP_cvStartDSP( void )*, *DSP_cvEndDSP(void)* and *DSP_cvSyncDSP( void )* are completely new API which is not related to original OpenCV. These APIs are used to setup DSP(make it ready for operation), to shut down DSP after all processing is completed and to synchronize ARM and DSP processor respectively.

====Note:- The memroy allocated for this API should be continious in physical address space. A patch is provided in the patch folder in base directory which could be applied to OpenCV 2.1 alloc.c file in opencv/modules/core/src. This patch should be applied and the library libopencv_core.so should be re-compiled. This new library will now allocate memory from continuous region. cvAlloc() can be used to request continious memory block if need in your application later.====

This work introduces following API's.

= Introduced API's =

===void DSP_cvStartDSP( void )===

This API should be used before any other API call is used. It performs all the necessary function to setup DSP before it could be used. This API also creates DSP side engine that is used later by other APIs. This is a mandatory function call that should be done before any algorithm specific API is used.

===void DSP_cvEndDSP(void)===

This API should be the last function call to DSP. This is a mandatory function call that should be performed at the end when DSP function calls will no longer be made. This API close the DSP side engine and shut down the DSP after releasing buffers that were internally used to set up DSP calls.

==={{{void DSP_cvSobel( const CvArr* srcarr, CvArr* dstarr, int dx, int dy, int aperture_size )}}}=== 

This API call is similar to *cvSobel()* API of OpenCV. Same restriction applies to this API as that of cvSobel(). Other added restriction are as follows

  #1 dx and dy should be equal to 1.(It can currently perform 1st order sobel derivative. Support for other order will be added later.)
  #2 aperture_size should be equal to 3.(It can currently perform 3x3 sobel filter operation. Support for other size of filter will be added later.)

==={{{void DSP_cvDFT( const CvArr* srcarr, CvArr* dstarr, int flags, int nonzero_rows )}}}===

This API call is similar to *cvDFT()* API of OpenCV. Same restriction applies to this API as that of cvDFT(). Other added restriction are as follows.

  #1 Size of rows and columns should be power of 2.
  #2 Minimum number of rows or columns can either be 1, 16 or greater.
  #3 Input and output matrix or image should be 2 channel floating point. 
  #4 The output data need to be scaled. 

==={{{void DSP_cvIntegral( const CvArr* image, CvArr* sumImage, CvArr* sumSqImage, CvArr* tiltedSumImage )}}}===

This API call is similar to *cvIntegral()* API of OpenCV. Same restriction applies to this API as that of cvIntegral(). Other added restriction are as follows.

  #1 The input image is single channel unsigned 8-bit image.
  #2 The output image is single channel 32-bit image with same number of columns and rows. 


==={{{void DSP_cvCvtColor( const CvArr* srcarr, CvArr* dstarr, int code )}}}===

This API call is similar to *cvCvtColor()* API of OpenCV. Same restriction applies to this API as that of cvSobel(). Other added restriction are as follows.
  
  #1 This API only performs CV_RGB2GRAY. Thus code should be CV_RGB2GRAY

==={{{void DSP_cvCvtColor_cvSobel( const CvArr* srcarr, CvArr* dstarr, int code, const void* srcarr_s, void* dstarr_s, int dx, int dy, int aperture_size )}}}===

This API call performs DSP_cvCvtColor() and DSP_cvSobel() in a single function call. This reduces the communication overhead between ARM and DSP. Same restriction applies to this call as that ot DSP_cvCvtColor() and DSP_cvSobel().

==={{{void DSP_cvSyncDSP( void )}}}===

This API call is used to synchronize the operation between ARM and DSP. As all the API above are asynchronous call to DSP, this API should be calle before the output data from other API call is referenced to maintain data coherency.